[{"/home/hemant/Desktop/chat-app/client/src/index.js":"1","/home/hemant/Desktop/chat-app/client/src/App.js":"2","/home/hemant/Desktop/chat-app/client/src/components/Join/Join.js":"3","/home/hemant/Desktop/chat-app/client/src/components/Chat/Chat.js":"4","/home/hemant/Desktop/chat-app/client/src/components/InfoBar/InfoBar.js":"5","/home/hemant/Desktop/chat-app/client/src/components/Input/Input.js":"6","/home/hemant/Desktop/chat-app/client/src/components/Messages/Messages.js":"7","/home/hemant/Desktop/chat-app/client/src/components/Message/Message.js":"8"},{"size":144,"mtime":1631271495923,"results":"9","hashOfConfig":"10"},{"size":366,"mtime":1631271499009,"results":"11","hashOfConfig":"10"},{"size":953,"mtime":1631271875459,"results":"12","hashOfConfig":"10"},{"size":1557,"mtime":1631430640080,"results":"13","hashOfConfig":"10"},{"size":527,"mtime":1631367843750,"results":"14","hashOfConfig":"10"},{"size":568,"mtime":1631375616570,"results":"15","hashOfConfig":"10"},{"size":383,"mtime":1631375608336,"results":"16","hashOfConfig":"10"},{"size":975,"mtime":1631430013383,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"6rsxo1",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/hemant/Desktop/chat-app/client/src/index.js",[],["37","38"],"/home/hemant/Desktop/chat-app/client/src/App.js",[],"/home/hemant/Desktop/chat-app/client/src/components/Join/Join.js",[],"/home/hemant/Desktop/chat-app/client/src/components/Chat/Chat.js",["39","40"],"import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\n\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\nconst ENDPOINT = 'http://localhost:5000';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n\n    setRoom(room);\n    setName(name)\n\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  \n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [ ...messages, message ]);\n    });\n    \n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n}, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;","/home/hemant/Desktop/chat-app/client/src/components/InfoBar/InfoBar.js",["41","42"],"import React from 'react';\nimport './InfoBar.css';\nimport onlineIcon from \"../../icons/onlineIcon.png\";\nimport closeIcon from \"../../icons/closeIcon.png\";\n\nconst InfoBar=({room})=>(\n    <div className='infoBar'>\n        <div className='leftInnerContainer'>\n            <img className='onlineIcon' src={onlineIcon} />\n            <h3>{room}</h3>\n        </div>\n        <div className='rightInnerContainer'>\n            <a href=\"/\"><img src={closeIcon} alt='close image'/></a>\n        </div>\n    </div>\n);\nexport default InfoBar;","/home/hemant/Desktop/chat-app/client/src/components/Input/Input.js",[],"/home/hemant/Desktop/chat-app/client/src/components/Messages/Messages.js",[],"/home/hemant/Desktop/chat-app/client/src/components/Message/Message.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":18,"column":10,"nodeType":"49","messageId":"50","endLine":18,"endColumn":15},{"ruleId":"51","severity":1,"message":"52","line":35,"column":6,"nodeType":"53","endLine":35,"endColumn":33,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":9,"column":13,"nodeType":"57","endLine":9,"endColumn":60},{"ruleId":"58","severity":1,"message":"59","line":13,"column":25,"nodeType":"57","endLine":13,"endColumn":65},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'ENDPOINT'. Either exclude it or remove the dependency array. Outer scope values like 'ENDPOINT' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [location.search]",{"range":"65","text":"66"},[844,871],"[location.search]"]